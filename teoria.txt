El Schema es la base de una API en GraphQL, es el encargado de describir todos los tipos de información que va a contener.

https://graphql.org/

inicializar un proyecto
$ npx license mit > LICENSE && npx gitignore node && git init && npm init -y

instalar graphql
$ npm i graphql

$ npm i express express-graphql

los custom types son para definir un tipo de dato a devolver con su estructura

herramienta 
$ npm i graphql-tools

para encriptar datos 
$ npm i dotenv

instalar mongo
$ npm i mongo

Mutation
Ya hemos visto cómo consultar información mediante GraphQL, pero en un API también vas a necesitar mandar información para que sea almacenada, dentro de GraphQL esto es posible gracias a la especificación mutation.
Un mutation va a requerir de un campo de tipo Input que son como plantillas que le van a indicar qué campos son necesarios para insertar o modificar información.
La sintaxis de una mutation queda de la siguiente manera:
nombreMutation(input: InputType): tipo
la mutacion siempre transforma los datos dentro de una API

Nested Types
es la creacion de un tipo dentro de otro tipo, insertar un id en otra tabla

types
nos permiten modificar los campos de nuestros type dentro del schema 

Alies, nos permite ponerle un nombre a las funciones que yo requiera 
{
  AllCourse: getCourses {
    _id
    title
  }
  
  Course1: getCourse( id: "5e5845007c213e6737403fbe"){
    _id
    title
    description
  }
  
  Course2: getCourse( id: "5e5845007c213e6737403fbe"){
    topic
    title
    description
  }
}


Fragment, nos sirve para poner general campos que requiera las funciones 
{
  AllCourse: getCourses {
    ...CourseFields
  }
  
  Course1: getCourse( id: "5e5845007c213e6737403fbe"){
    ...CourseFields
    teacher
  }
  
  Course2: getCourse( id: "5e5845007c213e6737403fbe"){
    ...CourseFields
    topic
  }
}


otro tipo de type es el emun que son valores predeterminado que debe llevar un campo

interaces 
nos sirven para diferenciar diferentes objetos y utilizar el 
fragment para separarlos
Las interfaces son muy importantes y útiles cuando nos encontramos con
tipos de datos similares. Una interfaz nos permite definir un tipo de dato padre que 
utilizando la palabra implements va a implementar los campos que tenga definidos dentro del tipo de dato que queramos.

directivas
nos sirven para poner condiciones en la consulta.
tambein hay una opcion de agregar a los campos de los tipos @deprecated
para avisar que esa varibale sera quitada en un futuro

union
es un tipo que nos sirve de busqueda para diferentes types dentro del schema
para se haga la busqueda es recomendable que los campos sean indices asi
la busqueda sera mas rapida, ademas hay que usar un type (el archivo type) para devolver su type


CLIENTES PARA GraphQL
fetchql npm
graphql-request npm (mas sencillo de usar)
apollo client npm (es algo mas completo)
Relay framework lo usa facebook para integrarlo con react
apollo angular es su contraparte

fragment CourseFields on Course {
  _id
  title
  description
  people {
  	_id
  	name
  }
}



Example en la web
mutation {
  createCourse(input: {
    title: "Curso de Ejemplo 4",
    description: "descripcion 4",
    topic: "diseño"
  }){
    _id
    title
    description
  }
}

mutation {
  createStudent(input: {
    name: "Estudiante 1"
    email: "estudiate@email.com"
  }) {
    _id
    name
    email
  }
}

mutation {
  editCourse ( _id: "5e5844f17c213e6737403fb4", input: {
    title: "Mi titulo 1"
  } ){
    _id
    title
  }
}


{
  getCourses {
    _id
    title
  }
}


Especificaciones de graphql (junio 2018)

sintaxis para definir argumentos para un query
nombreQuery(campo: tipo): tipo


